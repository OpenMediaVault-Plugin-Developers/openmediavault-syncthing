#! /bin/sh

### BEGIN INIT INFO
# Provides:          syncthing server instance
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts instance of syncthing server
# Description:       starts instance of syncthing server using start-stop-daemon
### END INIT INFO

# main variables
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="syncthing"
NAME="syncthing"
DAEMON=/usr/bin/syncthing
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

#
# Function that starts the daemon/service
#
do_start()
{
    for ST_USER in $ST_USERS; do

        HOMEDIR=$(getent passwd $ST_USER | awk -F: '{print $6}')

        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        echo "Starting Syncthing for user" $ST_USER
        start-stop-daemon --start --background --oknodo --chuid $ST_USER --user $ST_USER --exec $DAEMON --test > /dev/null \
            || return 1
        start-stop-daemon --start --background --oknodo --chuid $ST_USER --user $ST_USER --exec $DAEMON -- $DAEMON_ARGS \
            || return 2
    done
}

#
# Function that stops the daemon/service
#
do_stop()
{
    for ST_USER in $ST_USERS; do
        ST_PID=$(pgrep -fu $ST_USER $DAEMON)
        if [ ! -z "$ST_PID" ]; then

            # Return
            #   0 if daemon has been stopped
            #   1 if daemon was already stopped
            #   2 if daemon could not be stopped
            #   other if a failure occurred
            echo "Stopping Syncthing for user" $ST_USER
            start-stop-daemon --stop --oknodo --retry=TERM/30/KILL/5 --chuid $ST_USER --user $ST_USER --name $NAME
            RETVAL="$?"
            [ "$RETVAL" = 2 ] && return 2
        fi
    done
}

#
# Function that gives the status of the daemon/service
#
do_status() {
    for ST_USER in $ST_USERS; do
        ST_PID=$(pgrep -fu $ST_USER $DAEMON)
        if [ -z "$ST_PID" ]; then
            echo "Syncthing for USER $ST_USER: not running."
        else
            echo "Syncthing for USER $ST_USER: running (pid" $ST_PID")"
        fi
    done
}

# Only apply actions to single user when a user is specified
if [ "$2" != "" ]; then
    ST_USERS=$2
fi

#
# Actions
#
case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
    ;;

    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
    ;;

    status)
        do_status
    ;;

    restart|reload|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
            ;;
            *)
                # Failed to stop
                log_end_msg 1
            ;;
        esac
    ;;

    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
        exit 3
    ;;
esac

exit 0
